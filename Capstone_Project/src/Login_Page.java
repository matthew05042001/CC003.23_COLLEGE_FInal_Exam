/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author matth
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class Login_Page extends javax.swing.JFrame {

    /**
     * Creates new form Login_Page
     */
    private static String usname, pass, type = "admin";
    private static String filepath = "src\\data2.json";
    private static JSONParser jsonParser = new JSONParser();
    private static JSONObject record = new JSONObject();
    private static JSONArray userlist = new JSONArray();
    private static JSONObject user = new JSONObject();

    public Login_Page() {
        initComponents();

        loadCredentials2();
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.out.println("The application is closed"); // Log when app closes
            }
        });

        UserName.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK));
        Psswrd.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK));

        jButton1.setBorderPainted(true);  // Ensure the border is painted
        jButton1.setFocusPainted(false);   // Remove focus outline
        jButton1.setContentAreaFilled(false); // Remove background color
        jButton1.setOpaque(false);         // Ensure transparency
        jButton1.setForeground(new Color(0, 51, 153)); // Set text color
        jButton1.setFont(new Font("Arial", Font.PLAIN, 16)); // Adjust font style & size
        // Add a visible border
        jButton1.setBorder(BorderFactory.createLineBorder(new Color(0, 51, 153), 2)); // Blue border with thickness 2

        jButton2.setBorderPainted(true);  // Ensure the border is painted
        jButton2.setFocusPainted(false);   // Remove focus outline
        jButton2.setContentAreaFilled(false); // Remove background color
        jButton2.setOpaque(false);         // Ensure transparency
        jButton2.setForeground(new Color(0, 51, 153)); // Set text color
        jButton2.setFont(new Font("Arial", Font.PLAIN, 16)); // Adjust font style & size
        // Add a visible border
        jButton2.setBorder(BorderFactory.createLineBorder(new Color(0, 51, 153), 2)); // Blue border with thickness 2

        jButton3.setBorderPainted(true);  // Ensure the border is painted
        jButton3.setFocusPainted(false);   // Remove focus outline
        jButton3.setContentAreaFilled(false); // Remove background color
        jButton3.setOpaque(false);         // Ensure transparency
        jButton3.setForeground(Color.WHITE); // Set text color to white
        jButton3.setFont(new Font("Arial", Font.PLAIN, 16)); // Adjust font style & size
        // Add a visible border
        jButton3.setBorder(BorderFactory.createLineBorder(Color.WHITE)); // Blue border with thickness 2

        jButton4.setBorderPainted(false);  // Remove button border
        jButton4.setFocusPainted(false);   // Remove focus outline
        jButton4.setContentAreaFilled(false); // Remove background color
        jButton4.setOpaque(false);         // Ensure transparency
        jButton4.setForeground(new Color(0, 51, 153));; // Set text color to white
        jButton4.setFont(new Font("Arial", Font.PLAIN, 16)); // Adjust font style & size

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        UserName = new javax.swing.JTextField();
        Psswrd = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(0, 51, 153));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 153));
        jLabel2.setText("LOGIN TO YOUR ACCOUNT ");

        UserName.setText("USERNAME");
        UserName.setName(""); // NOI18N
        UserName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserNameMouseClicked(evt);
            }
        });
        UserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameActionPerformed(evt);
            }
        });

        Psswrd.setText("PASSWORD");
        Psswrd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PsswrdMouseClicked(evt);
            }
        });

        jRadioButton1.setForeground(new java.awt.Color(0, 51, 153));
        jRadioButton1.setText("REMEMBER ME");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jButton1.setForeground(new java.awt.Color(0, 51, 153));
        jButton1.setText("LOGIN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 51, 153));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("FORGOT PASSWORD?");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(0, 51, 153));
        jLabel7.setText("USERNAME");

        jLabel8.setForeground(new java.awt.Color(0, 51, 153));
        jLabel8.setText("PASSWORD");

        jButton2.setForeground(new java.awt.Color(0, 51, 153));
        jButton2.setText("CLEAR ALL");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(Psswrd, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4))
                            .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(Psswrd, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton1))
                .addGap(39, 39, 39)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\matth\\Downloads\\image (3).png")); // NOI18N
        jLabel1.setText("  INVENTORY MANAGEMENT SYSTEM");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\matth\\Downloads\\0s-280px-250px-unscreen.gif")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("\"Welcome Back!\"");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("\"You're just one step away from organization.\"");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("\"Don't have an account?\"");

        jButton3.setBackground(new java.awt.Color(0, 51, 153));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("REGISTER ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(132, 132, 132)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(45, 45, 45)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jLabel6)
                .addGap(70, 70, 70)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        if (jRadioButton1.isSelected()) {
            // If "Remember Me" is checked, save credentials
            saveCredentials(UserName.getText(), Psswrd.getText());
        } else {
            // If unchecked, disable auto-login
            clearCredentials();
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            usname = UserName.getText();
            pass = Psswrd.getText();

            filecheck(); // Load the JSON file

            boolean isValidUser = false;
            String userType = ""; // Store user type if found

            // Loop through user list
            for (int a = 0; a < userlist.size(); a++) {
                JSONObject userobject = (JSONObject) userlist.get(a);
                String foundusname = (String) userobject.get("username");
                String foundpass = (String) userobject.get("password");
                String foundtype = (String) userobject.get("type");

                // ✅ Check if credentials match
                if (usname.equals(foundusname) && pass.equals(foundpass)) {
                    isValidUser = true;
                    userType = foundtype;
                    break;
                }
            }

            // ✅ Allow login only if credentials match JSON file
            if (isValidUser) {
                if ("admin".equals(userType)) {  // ✅ Safe way to compare strings
                    new Admin().setVisible(true);
                    dispose();
                } else if ("member".equals(userType)) {
                    new user().setVisible(true);
                    dispose();
                } else {
                    System.out.println("Error: userType is null or invalid!");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid username or password!", "Login Failed", JOptionPane.ERROR_MESSAGE);
            }
            String adname = UserName.getText().trim();
            String status = "LOGIN";

            // Get current date and time
            LocalDateTime currentDateTime = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = currentDateTime.format(formatter);

            // Check for blank fields
            if (adname.isEmpty()) {
                JOptionPane.showMessageDialog(null, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Stop execution
            }

            // Load existing user list from JSON file
            if (userlist == null) {
                userlist = new JSONArray();
            }

            if (record.containsKey("users")) {
                userlist = (JSONArray) record.get("users"); // Load existing users
            }

            // Check if username exists in JSON file
            boolean userExists = false;
            for (Object obj : userlist) {
                JSONObject existingUser = (JSONObject) obj;
                if (adname.equalsIgnoreCase((String) existingUser.get("username"))) {
                    userExists = true;
                    break;
                }
            }

            if (!userExists) {
                JOptionPane.showMessageDialog(null, "Username not found! Cannot add entry.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Stop execution
            }

            // Create new user object
            JSONObject user = new JSONObject();
            String type = (String) user.get("type");

            for (Object obj : userlist) {
                JSONObject existingUser = (JSONObject) obj;
                if (adname.equalsIgnoreCase((String) existingUser.get("username"))) {
                    type = (String) existingUser.get("type"); // Get type from JSON
                    break;
                }
            }

            if (isValidUser) {
                user.put("username", adname);
                user.put("Login", formattedDateTime); // Store date & time

                user.put("type", type);

                user.put("Current", status);
                // Add the new user to the existing list
                userlist.add(user);
                record.put("users", userlist); // Ensure users are updated in the record

                save(); // Save the updated JSON file
                JOptionPane.showMessageDialog(null, "Successfully recorded, username  and login time !", "Success", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(this, "Invalid username or password!", "Login cannot save", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            java.util.logging.Logger.getLogger(Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Register Register = new Register();
        Register.setVisible(true);
        dispose(); // Hides the Admin panel
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Retrieve Retrieve = new Retrieve();
        Retrieve.setVisible(true);
        dispose(); // Hides the Admin panel
    }//GEN-LAST:event_jButton4ActionPerformed

    private void UserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserNameActionPerformed

    private void UserNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserNameMouseClicked
        UserName.setText(""); // Clear username field

    }//GEN-LAST:event_UserNameMouseClicked

    private void PsswrdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PsswrdMouseClicked
        Psswrd.setText(""); // Clear password field
    }//GEN-LAST:event_PsswrdMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        UserName.setText(""); // Clear username field
        Psswrd.setText(""); // Clear password field
    }//GEN-LAST:event_jButton2ActionPerformed

    private void saveCredentials(String username, String password) {
        try {
            filecheck(); // Load the existing JSON user data

            if (userlist == null) {
                JOptionPane.showMessageDialog(this, "Error: User list is not initialized.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            boolean userExists = false;

            // Reset "remember" flag for all users
            for (Object obj : userlist) {
                JSONObject userObject = (JSONObject) obj;
                userObject.put("remember", false);
            }

            // Find the correct user and set "remember" to true
            for (Object obj : userlist) {
                JSONObject userObject = (JSONObject) obj;

                // Debugging - print values
                System.out.println("Checking User: " + userObject.get("username") + " | Password: " + userObject.get("password"));

                // Fix potential NullPointerException
                String storedUsername = userObject.get("username") != null ? userObject.get("username").toString() : "";
                String storedPassword = userObject.get("password") != null ? userObject.get("password").toString() : "";

                if (storedUsername.equals(username) && storedPassword.equals(password)) {
                    userObject.put("remember", true);
                    userExists = true;
                    break;
                }
            }

            if (!userExists) {
                JOptionPane.showMessageDialog(this, "Invalid credentials. Cannot enable Remember Me.");
                return;
            }

            record.put("users", userlist);
            save();

            System.out.println("✅ Credentials saved successfully!");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadCredentials() {
        try {
            filecheck(); // Load user credentials from the JSON file

            boolean rememberMeFound = false;

            // Loop through userlist and find a user with "remember" set to true
            for (Object obj : userlist) {
                JSONObject userObject = (JSONObject) obj;
                if (userObject.containsKey("remember") && (boolean) userObject.get("remember")) {
                    String savedUsername = (String) userObject.get("username");
                    String savedPassword = (String) userObject.get("password");

                    // Preload the saved credentials into the text fields
                    UserName.setText(savedUsername);
                    Psswrd.setText(savedPassword);
                    jRadioButton1.setSelected(true); // Enable "Remember Me" checkbox

                    System.out.println("Loaded saved credentials for: " + savedUsername);

                    rememberMeFound = true;

                    break; // Stop checking after finding a remembered user

                }
            }

            if (!rememberMeFound) {
                System.out.println("No remembered credentials found.");
            }

        } catch (IOException | ParseException ex) {
            java.util.logging.Logger.getLogger(Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void loadCredentials2() {
        try {
            filecheck(); // Load user credentials from the JSON file

            boolean rememberMeFound = false;

            // Loop through userlist and find a user with "remember" set to true
            for (Object obj : userlist) {
                JSONObject userObject = (JSONObject) obj;
                if (userObject.containsKey("remember") && (boolean) userObject.get("remember")) {
                    String savedUsername = (String) userObject.get("username");
                    String savedPassword = (String) userObject.get("password");

                    // Preload the saved credentials into the text fields
                    UserName.setText(savedUsername);
                    Psswrd.setText(savedPassword);
                    jRadioButton1.setSelected(true); // Enable "Remember Me" checkbox

                    System.out.println("Loaded saved credentials for: " + savedUsername);

                    rememberMeFound = true;

                    break; // Stop checking after finding a remembered user

                }
            }

            if (!rememberMeFound) {
                System.out.println("No remembered credentials found.");
            }

        } catch (IOException | ParseException ex) {
            java.util.logging.Logger.getLogger(Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void clearCredentials() {
        try {
            filecheck(); // Load existing users from JSON

            if (userlist == null || userlist.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No users found in the data file.", "Data Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String inputUsername = UserName.getText();

            for (Object obj : userlist) {
                if (obj instanceof JSONObject) {
                    JSONObject userObject = (JSONObject) obj;

                    Object storedUserObj = userObject.get("username");
                    if (storedUserObj != null && inputUsername.equals(storedUserObj.toString())) {
                        userObject.put("remember", false); // Disable Remember Me
                        break;
                    }
                }
            }

            // Save updated data back to the file
            record.put("users", userlist);
            save();

            // Clear the input fields in UI
            UserName.setText("");
            Psswrd.setText("");
            jRadioButton1.setSelected(false);

            System.out.println("✅ Remember Me disabled and credentials cleared.");
        } catch (IOException | ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error clearing credentials: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void filecheck() throws IOException, ParseException {
        File file = new File(filepath);

        // ✅ Check if file exists, if not, create an empty JSON structure
        if (!file.exists()) {
            record = new JSONObject();
            userlist = new JSONArray();
            record.put("users", userlist);
            save(); // Save an empty file to avoid errors
        } else {
            FileReader reader = new FileReader(filepath);
            if (reader.ready()) {
                Scanner scan = new Scanner(reader);
                StringBuilder jsonContent = new StringBuilder();

                while (scan.hasNext()) {
                    jsonContent.append(scan.nextLine());
                }
                reader.close();

                if (!jsonContent.toString().isEmpty()) {
                    record = (JSONObject) jsonParser.parse(jsonContent.toString());
                    userlist = (JSONArray) record.get("users");
                } else {
                    record = new JSONObject();
                    userlist = new JSONArray();
                    record.put("users", userlist);
                }
            }
        }
    }

    public static void save() throws IOException {
        FileWriter file = new FileWriter(filepath);
        file.write(record.toJSONString());
        file.close();
    }

    public static String getusname() {
        return usname;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Psswrd;
    private javax.swing.JTextField UserName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    // End of variables declaration//GEN-END:variables
}
